<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How CRS Works on Core Rule Set Documentation</title><link>https://coreruleset.github.io/documentation/concepts/</link><description>Recent content in How CRS Works on Core Rule Set Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://coreruleset.github.io/documentation/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Anomaly Scoring</title><link>https://coreruleset.github.io/documentation/concepts/anomaly_scoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coreruleset.github.io/documentation/concepts/anomaly_scoring/</guid><description>The Core Rule Set 3 is designed as an anomaly scoring rule set. This page explains what anomaly scoring is and how to use it.
Overview of Anomaly Scoring Anomaly scoring, also known as &amp;ldquo;collaborative detection&amp;rdquo;, is a scoring mechanism used in the Core Rule Set. It assigns a numeric score to HTTP transactions (requests and responses), representing how &amp;lsquo;anomalous&amp;rsquo; they appear to be. Anomaly scores can then be used to make blocking decisions.</description></item><item><title>Paranoia Levels</title><link>https://coreruleset.github.io/documentation/concepts/paranoia_levels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coreruleset.github.io/documentation/concepts/paranoia_levels/</guid><description>Paranoia levels are an essential concept when working with the Core Rule Set. This page explains the concept behind paranoia levels and how to work with them on a practical level.
Introduction to Paranoia Levels The paranoia level (PL) makes it possible to define how aggressive the Core Rule Set is. Paranoia level 1 (PL 1) provides a set of rules that hardly ever trigger a false alarm (ideally never, but it can happen, depending on the local setup).</description></item><item><title>False Positives and Tuning</title><link>https://coreruleset.github.io/documentation/concepts/false_positives_tuning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coreruleset.github.io/documentation/concepts/false_positives_tuning/</guid><description>When a genuine transaction causes a rule from the Core Rule Set to match in error it is described as a false positive. False positives need to be tuned away by writing rule exclusions, as this page explains.
What are False Positives? The Core Rule Set provides generic attack detection capabilities. A fresh CRS deployment has no awareness of the web services that may be running behind it, or the quirks of how those services work.</description></item><item><title>Plugin Mechanism</title><link>https://coreruleset.github.io/documentation/concepts/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coreruleset.github.io/documentation/concepts/plugins/</guid><description>The CRS plugin mechanism allows the rule set to be extended in specific, experimental, or unusual ways, as this page explains.
NotePlugins are not part of the CRS 3.3.x release line. They are released officially with CRS 4.0. In the meantime, plugins can be used with one of the stable releases by following the instructions presented below.
What are Plugins? Plugins are sets of additional rules that can be plugged in to a web application firewall in order to expand CRS with complementary functionality or to interact with CRS.</description></item><item><title>Sampling Mode</title><link>https://coreruleset.github.io/documentation/concepts/sampling_mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coreruleset.github.io/documentation/concepts/sampling_mode/</guid><description>Sampling mode makes it possible to apply the Core Rule Set to a limited percentage of traffic only. This may be useful in certain scenarios when enabling CRS for the first time, as this page explains.
Introduction to Sampling Mode The Core Rule Set&amp;rsquo;s sampling mode mechanism was first introduced in version 3.0.0 in 2016. Although the feature has been available since then, itâ€™s rarely used in practice, partly due to it being one of the lesser-known features of CRS.</description></item></channel></rss>